[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "memory-movie-maker"
version = "0.1.0"
description = "An intelligent, conversational video editing tool that transforms raw photos and videos into polished memory movies using AI"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "video-editing",
    "ai",
    "machine-learning",
    "multi-agent",
    "google-adk",
    "gemini",
    "automation",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core dependencies
    "google-adk==1.9.0",
    "google-genai>=1.0.0",
    "google-cloud-aiplatform[adk,agent-engines]==1.106.0",
    
    # Video/Audio processing
    "moviepy==2.2.1",
    "librosa==0.11.0",
    "numpy<2.3.0,>=1.25.0",
    "opencv-python==4.12.0.88",
    "pillow==11.3.0",
    "scipy>=1.10.0",  # Required for audio processing
    
    # Data models and validation
    "pydantic==2.11.7",
    "pydantic-settings==2.10.1",
    
    # Utilities
    "python-dotenv==1.1.1",
    "httpx==0.28.1",
    "aiofiles==24.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==8.4.1",
    "pytest-asyncio==0.25.2",
    "pytest-cov==6.0.0",
    "pytest-mock==3.14.0",
    "pytest-timeout==2.3.1",
    
    # Code quality
    "black==25.1.0",
    "isort==5.13.2",
    "flake8==7.1.1",
    "flake8-docstrings==1.7.0",
    "mypy==1.17.1",
    "pylint==3.4.1",
    
    # Type stubs
    "types-requests==2.32.0.20250102",
    "types-aiofiles==24.1.0.20241221",
    
    # Documentation
    "sphinx==8.3.0",
    "sphinx-rtd-theme==3.1.1",
    
    # Development tools
    "ipdb==0.13.13",
    "pre-commit==4.0.1",
]


[project.urls]
Homepage = "https://github.com/yourusername/memory-movie-maker"
Documentation = "https://memory-movie-maker.readthedocs.io"
Repository = "https://github.com/yourusername/memory-movie-maker.git"
Issues = "https://github.com/yourusername/memory-movie-maker/issues"

[project.scripts]
memory-movie-maker = "memory_movie_maker.__main__:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["memory_movie_maker*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
memory_movie_maker = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "librosa.*",
    "moviepy.*",
    "google.adk.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=memory_movie_maker",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["memory_movie_maker"]
branch = true
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/migrations/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pylint configuration
[tool.pylint.main]
py-version = "3.10"
ignore = ["migrations", "venv", ".venv"]
jobs = 0

[tool.pylint.messages_control]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
    "W0613",  # unused-argument
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "x", "y", "z"]

[tool.pylint.design]
max-args = 10
max-attributes = 20
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 1